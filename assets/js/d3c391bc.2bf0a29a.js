(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{92:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return b}));var n=a(3),o=a(7),r=(a(0),a(104)),l={slug:"JS Maps and Objects as Keys",title:"JS Maps and Objects as Keys",author:"Evan McDowell",author_title:"Software Engineer @ Ware2go",author_url:"https://github.com/EvanMcDowell31",author_image_url:"https://avatars.githubusercontent.com/u/40528617?s=400&u=1f93b55320b7de438bfb4916e3da747865f4bbcd&v=4",tags:["docusaurus","Map","JS"]},s={permalink:"/EvanDocs/blog/JS Maps and Objects as Keys",editUrl:"https://github.com/EvanMcDowell31/EvanDocs/edit/main/blog/2021-05-21-js-maps-and-objects-as-keys.mdx",source:"@site/blog/2021-05-21-js-maps-and-objects-as-keys.mdx",title:"JS Maps and Objects as Keys",description:"What is a Map",date:"2021-05-21T00:00:00.000Z",formattedDate:"May 21, 2021",tags:[{label:"docusaurus",permalink:"/EvanDocs/blog/tags/docusaurus"},{label:"Map",permalink:"/EvanDocs/blog/tags/map"},{label:"JS",permalink:"/EvanDocs/blog/tags/js"}],readingTime:5.295,truncated:!1,nextItem:{title:"Create Your Own Doc io",permalink:"/EvanDocs/blog/Create Your Own Doc io"}},i=[{value:"What is a Map",id:"what-is-a-map",children:[]},{value:"Object equality and references",id:"object-equality-and-references",children:[{value:"What is a reference",id:"what-is-a-reference",children:[]}]},{value:"Maps",id:"maps",children:[]},{value:"The PROBLEM",id:"the-problem",children:[{value:"One Solution",id:"one-solution",children:[]}]},{value:"Lets Experiment",id:"lets-experiment",children:[]},{value:"Conclusion",id:"conclusion",children:[]}],c={toc:i};function b(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"what-is-a-map"},"What is a ",Object(r.b)("a",{parentName:"h2",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"Map")),Object(r.b)("p",null,"A Map is a data structure in JavaScript that is similar to an object, with some main differences being:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A Map remembers the original insertion order of the keys"),Object(r.b)("li",{parentName:"ul"},"Any value (both ",Object(r.b)("strong",{parentName:"li"},"objects")," and ",Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Glossary/Primitive"},"primitive values"),") may be used as either a ",Object(r.b)("strong",{parentName:"li"},"key")," or a value."),Object(r.b)("li",{parentName:"ul"},"Maps are itereable (similar to arrays) and has size property (similar to array length)"),Object(r.b)("li",{parentName:"ul"},"Performs better in scenarios involving frequent additions and removals of key-value pairs than an object.")),Object(r.b)("p",null,"OK now we got that out of the way, we can do some exploring into this Object as keys thing MDN is talking about. If you're like me you like to experiment from time to time with code just to see if things will work. I am a firm believer that experimentation leads to a better understanding regardless if you succeed or not.\nIn this instance learning about how we can use objects as keys with Maps."),Object(r.b)("p",null,"So before get to Maps we need a base understanding about objects, specifically how the equallity operator handles them. Feel free to pop open chrome console and follow along."),Object(r.b)("h2",{id:"object-equality-and-references"},"Object equality and references"),Object(r.b)("p",null,"So lets talk about object equality in JavaScript. If we define two objects with the same keys and values:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const obj1 = { key: "value" };\nconst obj2 = { key: "value" };\n')),Object(r.b)("p",null,"And we use ",Object(r.b)("inlineCode",{parentName:"p"},"===")," triple equals as our equality operator to compare the two objects"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"obj1 === obj2;\n")),Object(r.b)("p",null,"What would we expect the outcome to be?\nIf you said ",Object(r.b)("inlineCode",{parentName:"p"},"false")," you're correct.\nWhile you may say thats weird, I can explain why this is. JavaScript is sort of ",Object(r.b)("em",{parentName:"p"},"lazy")," in comparing objects. What I mean is that JavaScript only looks at the object reference when comparing them."),Object(r.b)("h3",{id:"what-is-a-reference"},"What is a reference"),Object(r.b)("p",null,"If you have ever named a variable in code, then you have made use of a reference. To take a slightly deeper dive when something gets assigned it also gets written to computor memory. You can think of computer memory as a table that stores values at addresses. Much like a warehouse stores packages on shelves that have addresses on them, so that they know where to find things.\nSo one of our objects may look like this in memory."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"address"),Object(r.b)("th",{parentName:"tr",align:"right"},"value"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"0012CCGWH80"),Object(r.b)("td",{parentName:"tr",align:"right"},'{ key: "value" }')))),Object(r.b)("p",null,"With the address being some hash value. Now since we named this variable we have an identifier, a name that points to this address. A pointer if you will."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null}),Object(r.b)("th",{parentName:"tr",align:null},"address"),Object(r.b)("th",{parentName:"tr",align:"right"},"value"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"obj1 ->"),Object(r.b)("td",{parentName:"tr",align:null},"0012CCGWH80"),Object(r.b)("td",{parentName:"tr",align:"right"},'{ key: "value" }')))),Object(r.b)("p",null,"So now the user (coder) can reference values in memory through a name."),Object(r.b)("p",null,"Keep this in mind as we move along, it will come back up."),Object(r.b)("h2",{id:"maps"},"Maps"),Object(r.b)("p",null,"So lets play around with Maps and object keys.\nWe can instanciate a Map with an array of arrays, with the inner beeeing key value pairs."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const objMap = new Map([[obj1, "value"]]);\n')),Object(r.b)("p",null,"So in the above example the initializer value being ",Object(r.b)("inlineCode",{parentName:"p"},"[[key, value]]"),". This means ",Object(r.b)("inlineCode",{parentName:"p"},"obj1")," becomes the ",Object(r.b)("strong",{parentName:"p"},"key")," in the Map.\nIf you're following along in the console, when you print objMap you will see something like this:"),Object(r.b)("img",{src:"../static/img/MapWithObjectsKeys.png"}),Object(r.b)("h2",{id:"the-problem"},"The PROBLEM"),Object(r.b)("p",null,"So with the object reference knowlege we gained earlier, what would we expect the output to be for this get call to the Map we created:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'objMap.get({ key: "value" });\n')),Object(r.b)("p",null,"If you said ",Object(r.b)("inlineCode",{parentName:"p"},"undefined"),", you are most certainly correct. Because we learned earlier that JavaScript looks at the reference to the object, not the actual deep equality of the object.\nSo since we passed an unnamed object here, (even though it is the same object) it has a different reference than the object key stored in the Map."),Object(r.b)("p",null,"So if we used the name of the key we created instead, this will work because the equality passes (becausee they share the same reference)."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"objMap.get(obj1);\n")),Object(r.b)("p",null,"And you should be successful in retreiving ",Object(r.b)("inlineCode",{parentName:"p"},'"value"'),"."),Object(r.b)("h3",{id:"one-solution"},"One Solution"),Object(r.b)("p",null,"One solution would be to use hashing, not going to get into that right now though, but if you're interested ",Object(r.b)("a",{parentName:"p",href:"https://esdiscuss.org/topic/maps-with-object-keys"},"here")," might be a good place to start."),Object(r.b)("hr",null),Object(r.b)("h2",{id:"lets-experiment"},"Lets Experiment"),Object(r.b)("p",null,"Consider a Theme object, defined in an aplication, a constant object that will always have a reference."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const THEME = {\n  colors: {\n    neutrals: {\n      brandLight: {\n        hex: "#fff",\n        name: "white",\n        tag: "body",\n      },\n      brandMedium: {\n        hex: "#808080",\n        name: "grey",\n        tag: "header",\n      },\n    },\n  },\n  fonts: {\n    newTimes: {\n      roman: "roman",\n    },\n  },\n};\n')),Object(r.b)("p",null,"Theme contains some colors, grouped by catagory and we have another object called ",Object(r.b)("inlineCode",{parentName:"p"},"TAGS")," which contains where color catagorys are used."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},'const TAGS = {\n  colors: {\n    neutrals: ["header", "body"],\n  },\n};\n')),Object(r.b)("p",null,"Lets create a Map that maps specific colors (as objects defined with hex and other info), to that colors categorical tags."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const colorToColorCategoryTags = new Map([\n  [THEME.colors.neutrals.brandLight, THEME.tags.colors.neutrals],\n  [THEME.colors.neutrals.brandMedium, THEME.tags.colors.neutrals],\n]);\n")),Object(r.b)("p",null,"If you notice that the named brand colors are objects, used as keys, and thee values are the array of tags used by the color category.\nSo we can use this map like so (with named references):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"colorToColorCategoryTags.get(THEME.colors.neutrals.brandLight);\n")),Object(r.b)("p",null,"Which will return our array of tags."),Object(r.b)("h2",{id:"conclusion"},"Conclusion"),Object(r.b)("p",null,"You may ask why would you do this, well you most likely won't. ",Object(r.b)("strong",{parentName:"p"},"BUT")," its always good to know what the technology you use can do, and what you can do with your technology.\nTo get a deeper understanding of things, I will always be in favor of experiementation. This is how people find neat and easier ways to do things."),Object(r.b)("p",null,"Ofcourse a more practical example of a Map use would be like a filter on a table, something you add and remove keys on, here it would have better preformance than a vanilla object."),Object(r.b)("p",null,"Obviously there are many different ways to do things with code, and personally if I wanted to get tags of color categorys like our example here, I dont know if a Map would be my go-to solution. But it is a clean readable way to do it, which in my book counts for most of its score points on the ",Object(r.b)("em",{parentName:"p"},'"Would I use this"')," scale."),Object(r.b)("hr",null),Object(r.b)("p",null,"Sources:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://esdiscuss.org/topic/maps-with-object-keys"},"https://esdiscuss.org/topic/maps-with-object-keys"))))}b.isMDXComponent=!0}}]);